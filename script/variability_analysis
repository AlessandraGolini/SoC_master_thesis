##### Time variability #####

#########################
#### River Discharge ####
#########################
nodata = 9999.0  # GloFAS missing value
  # mask nodata first
glofas_masked = glofas_sorted.where(glofas_sorted.dis24 != nodata)
  # climatology
glofas_clim = glofas_masked['dis24'].mean('time')
# plot
fig = plt.figure(figsize=(8,6))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines('10m'); ax.add_feature(cfeature.BORDERS, linewidth=0.5)
glofas_clim.plot(
    ax=ax, x='longitude', y='latitude',
    transform=ccrs.PlateCarree(), cmap='Blues',
    cbar_kwargs={'label':'Mean river discharge (m³/s)'}
)
  # points 
ax.plot(lon_estuary, lat_estuary, 'o', color='red', transform=ccrs.PlateCarree())
ax.text(lon_estuary-0.3, lat_estuary-0.3, 'Volta Estuary reference point',
        color='red', transform=ccrs.PlateCarree())
ax.plot(lon_lake, lat_lake, 'o', color='red', transform=ccrs.PlateCarree())
ax.text(lon_lake+0.1, lat_lake-0.1, 'Volta Lake reference point',
        color='red', transform=ccrs.PlateCarree())
plt.title('Climatology - Mean discharge (2010–2021)')
plt.show()


## Tempral variability of the raw time series
  # Timeseries of River Discharge at the two reference points
  # Plot
fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(12, 8), sharex=True)
  # --- Estuary ---
ax1.plot(rd_estuary.time, rd_estuary, linestyle='-')
ax1.set_title("Raw time series - Discharge of Volta River at the Mouth (0.667°E, 5.77°N)")
ax1.set_ylabel("Discharge (m³/s)")  
ax1.set_xlabel("Year")
ax1.grid(True)
  # vertical lines: one per month
ax1.grid(True, axis='x', which='major', alpha=0.5)
  # a few horizontal lines (major only)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
  # --- Volta Lake ---
ax2.plot(rd_lake.time, rd_lake, linestyle='-', color='purple')
ax2.set_title("Raw time series - Discharge of Volta Lake (0.117°E, 6.50°N)")
ax2.set_ylabel("Discharge (m³/s)")  
ax2.set_xlabel("Year")
ax2.grid(True)
  # vertical lines: one per month
ax2.grid(True, axis='x', which='major', alpha=0.5)
  # a few horizontal lines (major only)
ax2.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
plt.show()

# -----------------------------
# Daily climatology and anomaly
# -----------------------------

# drop Feb 29 to get a 365-day climatology
is_feb29e = (rd_estuary.time.dt.month == 2) & (rd_estuary.time.dt.day == 29)
rdE_noleap = rd_estuary.sel(time=~is_feb29e)
rdE_noleap = rdE_noleap.convert_calendar("noleap", dim="time", align_on="date")


is_feb29l = (rd_lake.time.dt.month == 2) & (rd_lake.time.dt.day == 29)
rdL_noleap = rd_lake.sel(time=~is_feb29l)
rdL_noleap = rdL_noleap.convert_calendar("noleap", dim="time", align_on="date")

# --- Daily climatology (2010–2021) ---
rdE_dailyclim = rdE_noleap.groupby('time.dayofyear').mean('time')
rdL_dailyclim = rdL_noleap.groupby('time.dayofyear').mean('time')

dates_clim = pd.date_range("2010-01-01", periods=int(rdE_dailyclim.sizes["dayofyear"]), freq="D")
rdE_dailyclim = rdE_dailyclim.assign_coords(date=("dayofyear", dates_clim))
rdL_dailyclim = rdL_dailyclim.assign_coords(date=("dayofyear", dates_clim))

# --- Daily anomalies (value - daily climatology) ---
def to_datetime64_from_cftime(tcoord):
    return pd.to_datetime([f"{t.year:04d}-{t.month:02d}-{t.day:02d}" for t in tcoord.values])

rdE_dailyanom = rdE_noleap.groupby('time.dayofyear') - rdE_dailyclim
rdE_dailyanom = rdE_dailyanom.assign_coords(date=("time", to_datetime64_from_cftime(rdE_dailyanom["time"])))

rdL_dailyanom = rdL_noleap.groupby('time.dayofyear') - rdL_dailyclim
rdL_dailyanom = rdL_dailyanom.assign_coords(date=("time", to_datetime64_from_cftime(rdL_dailyanom["time"])))

# ---

# -------------------------------
# Monthly climatology and anomaly
# -------------------------------

# Monthly mean values at the two locations (E = estuary, L = lake)
rdE_mon = rd_estuary.resample(time='MS').mean()   # 'MS' = Month Start
rdL_mon = rd_lake.resample(time='MS').mean()

# Monthly climatology (average over all years for each month)
rdE_clim = rdE_mon.groupby('time.month').mean('time')   # dims: month
rdL_clim = rdL_mon.groupby('time.month').mean('time')

# Anomalies = monthly mean - climatology
rdE_anom = rdE_mon.groupby('time.month') - rdE_clim       # dims: time
rdL_anom = rdL_mon.groupby('time.month') - rdL_clim


  # Plots
# Plots
months = list(calendar.month_name)[1:]

# --------------------------------------
# Daily climatology plot RD
# --------------------------------------
fig, ax = plt.subplots(figsize=(12,4))
ax.plot(rdE_dailyclim['date'].values, rdE_dailyclim.values, marker='o', 
        ms=2, lw=0.8, label = 'Estuary (0.667°E, 5.77°N)')
ax.plot(rdL_dailyclim['date'].values, rdL_dailyclim.values, marker = 'o',
        color = 'purple', ms=2, lw=0.8, label ='Below the Volta Dam (0.087°E, 6.267°N)')
ax.set_title("Daily River Discharge Climatology (2010–2021)")
ax.set_ylabel("Discharge (m³/s)")
ax.set_xlabel("Month")
ax.grid(True, axis='x', alpha=0.5)
ax.grid(True, axis='y', linestyle='--', alpha=0.4)
ax.legend()

# Tidy monthly ticks
months = pd.date_range('2010-01-01', '2011-01-01', freq='MS')[:-1]
ax.set_xticks(months)
ax.set_xticklabels([m.strftime('%b') for m in months])
plt.tight_layout()
plt.show()

# -----------------------------------------------
# Daily vs Monthly climatology RD
# -----------------------------------------------

fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(12, 8), sharex=True)
# reference year (already non-leap)
year = pd.to_datetime(rdE_dailyclim['date'].values[0]).year
# dates for the monthly (start the month in the same year as daily)
month_dates = pd.date_range(f"{year}-01-01", periods=12, freq="MS")

# --- Estuary ---
ax1.plot(rdE_dailyclim['date'].values, rdE_dailyclim.values, lw=0.9, label="Daily mean 2010–2021")
ax1.plot(month_dates, rdE_clim.values, marker='o', label="Monthly mean 2010–2021")

ax1.xaxis.set_major_locator(mdates.MonthLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax1.set_xlim(pd.Timestamp(f"{year}-01-01"), pd.Timestamp(f"{year}-12-31"))

ax1.set_title("River Discharge Climatology at the Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Discharge (m³/s)")
ax1.set_xlabel("Month")
ax1.grid(True, axis='x', alpha=0.5)
ax1.grid(True, axis='y', linestyle='--', alpha=0.4)
ax1.legend(frameon=False)

# --- Volta Lake ---
ax2.plot(rdL_dailyclim['date'].values, rdL_dailyclim.values, color = 'purple' , lw=0.9, label="Daily mean 2010–2021")
ax2.plot(month_dates, rdL_clim.values, marker='o', color= 'blue',  label="Monthly mean 2010–2021")

ax2.xaxis.set_major_locator(mdates.MonthLocator())
ax2.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax2.set_xlim(pd.Timestamp(f"{year}-01-01"), pd.Timestamp(f"{year}-12-31"))

ax2.set_title("River Discharge Climatology downstream the Volta Lake (0.087°E, 6.267°N)")
ax2.set_ylabel("Discharge (m³/s)")
ax2.set_xlabel("Month")
ax2.grid(True, axis='x', alpha=0.5)
ax2.grid(True, axis='y', linestyle='--', alpha=0.4)
ax2.legend(frameon=False)
plt.tight_layout()
plt.show()

years = sorted(set(rd_estuary['time'].dt.year.values))

# --------------------------------------
# Monthly mean river discharge
# --------------------------------------

fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(12, 10), sharex=True)
cmap = plt.get_cmap('tab20')
colors = [cmap(i % cmap.N) for i in range(len(years))]

# --- Estuary ---
for i, (y1, yy1) in enumerate(rdE_mon.groupby('time.year')):
    # yy is the monthly series for that year (up to 12 points)
    ax1.plot(yy1['time.month'].values, yy1.values, label=str(y1), color=colors[i])

ax1.plot(rdE_clim['month'], rdE_clim.values, color='black', label='Climatology', linewidth=2)

ax1.set_title("Interannual Variability of River Discharge at the estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Discharge (m³/s)")
ax1.set_xlabel("Month", labelpad=8)
ax1.set_xticks(range(1, 13))
ax1.set_xticklabels(months)
ax1.set_xlim(1, 12)
ax1.set_axisbelow(True)
ax1.grid(True, axis='x', which='major', alpha=0.5)             
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0, fontsize=8, ncol=1, title="Year")

# --- Volta Lake ---
for j, (y2, yy2) in enumerate(rdL_mon.groupby('time.year')):
    # yy is the monthly series for that year (up to 12 points)
    ax2.plot(yy2['time.month'].values, yy2.values, label=str(y2), color=colors[j])

ax2.plot(rdL_clim['month'], rdL_clim.values, color='black', label='Climatology', linewidth=2)

ax2.set_title("Interannual Variability of River Discharge downstream the Volta Lake (0.087°E, 6.267°N) - Monthly mean")
ax2.set_ylabel("Discharge (m³/s)")
ax2.set_xlabel("Month", labelpad=8)
ax2.set_xticks(range(1, 13))
ax2.set_xticklabels(months)
ax2.set_xlim(1, 12)
ax2.set_axisbelow(True)
ax2.grid(True, axis='x', which='major', alpha=0.5)
ax2.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0, fontsize=8, ncol=1, title="Year")

plt.tight_layout()
plt.show()

#---------------------------------
# Anomaly
#---------------------------------
# Unique years + one extra for right edge
years = np.unique(rdE_dailyanom['time.year'].values)
years_ext = np.append(years, years[-1] + 1)
year_ticks = [np.datetime64(f"{y}-01-01") for y in years_ext]

fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(12, 9), sharex=True)

# --- Estuary ---
ax1.plot(rdE_anom['time'], rdE_anom.values, color='b', linewidth=1.3, linestyle = '--', label = 'Monthly anomaly')
ax1.plot(rdE_dailyanom['date'].values, rdE_dailyanom.values, linewidth=1, color= 'r', label = 'Daily anomaly')
ax1.axhline(0, color='k', linewidth=0.8, alpha=0.6)
ax1.set_title("River Discharge Anomaly at the Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Anomaly (m³/s)")
ax1.set_xticks(year_ticks)
ax1.set_xticklabels(years_ext)
ax1.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend()

# --- Volta Lake ---
ax2.plot(rdL_anom['time'], rdL_anom.values, color='purple', linewidth=1.3, linestyle = '--', label = 'Monthly anomaly')
ax2.plot(rdL_dailyanom['date'].values, rdL_dailyanom.values, linewidth=1, color= 'orange', label = 'Daily anomaly')
ax2.axhline(0, color='k', linewidth=0.8, alpha=0.6)
ax2.set_title("River Discharge Anomaly downstream the Volta Lake (0.087°E, 6.267°N)")
ax2.set_ylabel("Anomaly (m³/s)")
ax2.set_xlabel("Year")
ax2.set_xticks(year_ticks)
ax2.set_xticklabels(years_ext)
ax2.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax2.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax2.legend()

plt.tight_layout()
plt.show()


# --------------------------------------
# Detrended climatologies and anomalies
# --------------------------------------
baseline = ('2010-01-01','2021-12-31')

# helper per assegnare una coord 'date' da cftime -> datetime64
def to_datetime64_from_cftime(tcoord):
    import pandas as pd
    return pd.to_datetime([f"{t.year:04d}-{t.month:02d}-{t.day:02d}" for t in tcoord.values])

# ---------- ESTUARY ----------
# trend and detrended time series
rdE_danom_from_anomd, rdE_clim_from_anomd, rdE_trend = anomd(rd_estuary, baseline=baseline, deg=1)
rdE_detr = rd_estuary - rdE_trend.interp(time=rd_estuary['time'])

# detrended monthly climatology
rdE_dclim_m = rdE_detr.sel(time=slice(*baseline)).groupby('time.month').mean('time')

# detrended daily climatology
is_feb29_E = (rdE_detr.time.dt.month == 2) & (rdE_detr.time.dt.day == 29)
rdE_detr_noleap = rdE_detr.sel(time=~is_feb29_E).convert_calendar("noleap", dim="time", align_on="date")
rdE_dclim_d = rdE_detr_noleap.sel(time=slice(*baseline)).groupby('time.dayofyear').mean('time')

dates_clim = pd.date_range("2010-01-01", periods=int(rdE_dclim_d.sizes["dayofyear"]), freq="D")
rdE_dclim_d = rdE_dclim_d.assign_coords(date=("dayofyear", dates_clim))

# detrended anomalies
rdE_danom_d = rdE_detr_noleap.groupby('time.dayofyear') - rdE_dclim_d
rdE_danom_d = rdE_danom_d.assign_coords(date=("time", to_datetime64_from_cftime(rdE_danom_d["time"])))

rdE_danom_m = rdE_detr.resample(time='MS').mean().groupby('time.month') - rdE_dclim_m

# ---------- VOLTA LAKE ----------
# trend and detrended time series
rdL_danom_from_anomd, rdL_clim_from_anomd, rdL_trend = anomd(rd_lake, baseline=baseline, deg=1)
rdL_detr = rd_lake - rdL_trend.interp(time=rd_lake['time'])

# detrended monthly climatology
rdL_dclim_m = rdL_detr.sel(time=slice(*baseline)).groupby('time.month').mean('time')

# detrended daily climatology
is_feb29_L = (rdL_detr.time.dt.month == 2) & (rdL_detr.time.dt.day == 29)
rdL_detr_noleap = rdL_detr.sel(time=~is_feb29_L).convert_calendar("noleap", dim="time", align_on="date")
rdL_dclim_d = rdL_detr_noleap.sel(time=slice(*baseline)).groupby('time.dayofyear').mean('time')

dates_clim = pd.date_range("2010-01-01", periods=int(rdL_dclim_d.sizes["dayofyear"]), freq="D")
rdL_dclim_d = rdL_dclim_d.assign_coords(date=("dayofyear", dates_clim))

# detrended anomalies
rdL_danom_d = rdL_detr_noleap.groupby('time.dayofyear') - rdL_dclim_d
rdL_danom_d = rdL_danom_d.assign_coords(date=("time", to_datetime64_from_cftime(rdL_danom_d["time"])))

rdL_danom_m = rdL_detr.resample(time='MS').mean().groupby('time.month') - rdL_dclim_m


# Timeseries of River Discharge at the two reference points

# Plot
fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(12, 8), sharex=True)

# --- Estuary ---
ax1.plot(rd_estuary.time, rd_estuary, linestyle='-', lw = 1, label = 'Raw')
ax1.plot(rdE_trend['time'], rdE_trend, linewidth=2, label="Trend", color="tab:orange")
ax1.set_title("Raw time series - Discharge of Volta River at the Mouth (0.667°E, 5.77°N)")
ax1.set_ylabel("Discharge (m³/s)")  
ax1.set_xlabel("Year")
ax1.grid(True)
# vertical lines: one per month
ax1.grid(True, axis='x', which='major', alpha=0.5)
# a few horizontal lines (major only)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend()

# --- Volta Lake ---
ax2.plot(rd_lake.time, rd_lake, linestyle='-', lw = 1, color='purple', label = 'Raw')
ax2.plot(rdL_trend['time'], rdL_trend, linewidth=2, label="Trend", color="tab:orange")
ax2.set_title("Raw time series - River Discharge downstream the Volta Lake (0.087°E, 6.267°N)")
ax2.set_ylabel("Discharge (m³/s)")  
ax2.set_xlabel("Year")
# vertical lines: one per month
ax2.grid(True, axis='x', which='major', alpha=0.5)
# a few horizontal lines (major only)
ax2.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax2.legend()

import matplotlib.dates as mdates

# one vertical grid line per year
year_loc = mdates.YearLocator()              # every year
year_fmt = mdates.DateFormatter('%Y')

for ax in (ax1, ax2):
    ax.xaxis.set_major_locator(year_loc)
    ax.xaxis.set_major_formatter(year_fmt)
    ax.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)

plt.show()

# -----------------------------------------------
# Daily vs Monthly detrended climatology plot
# -----------------------------------------------

import matplotlib.dates as mdates  # <-- missing import

fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(12, 8), sharex=True)

# reference year (already non-leap)
year = pd.to_datetime(rdE_dclim_d['date'].values[0]).year
month_dates = pd.date_range(f"{year}-01-01", periods=12, freq="MS")

# --- Estuary (detrended) ---
ax1.plot(rdE_dclim_d['date'].values, rdE_dclim_d.values, lw=1, label="Detrended daily mean 2010–2021")
ax1.plot(month_dates, rdE_dclim_m.values, marker='o', linestyle='--', label="Detrended monthly mean 2010–2021")

ax1.xaxis.set_major_locator(mdates.MonthLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax1.set_xlim(pd.Timestamp(f"{year}-01-01"), pd.Timestamp(f"{year}-12-31"))
ax1.set_title("Detrended Discharge Climatology at the Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Discharge (m³/s)")
ax1.set_xlabel("Month")
ax1.grid(True, axis='x', alpha=0.5)
ax1.grid(True, axis='y', linestyle='--', alpha=0.4)
ax1.legend(frameon=False)

# --- Volta Lake (detrended) ---
ax2.plot(rdL_dclim_d['date'].values, rdL_dclim_d.values, color='tab:purple', lw=1, label="Detrended daily mean 2010–2021")
ax2.plot(month_dates, rdL_dclim_m.values, marker='o', linestyle='--', color='tab:blue', label="Detrended monthly mean 2010–2021")

ax2.xaxis.set_major_locator(mdates.MonthLocator())
ax2.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax2.set_xlim(pd.Timestamp(f"{year}-01-01"), pd.Timestamp(f"{year}-12-31"))
ax2.set_title("Detrended Discharge Climatology downstream the Volta Lake (0.087°E, 6.267°N)")
ax2.set_ylabel("Discharge (m³/s)")
ax2.set_xlabel("Month")
ax2.grid(True, axis='x', alpha=0.5)
ax2.grid(True, axis='y', linestyle='--', alpha=0.4)
ax2.legend(frameon=False)

plt.tight_layout()
plt.show()

# --------------------------------------
# Daily vs Monthly detrended anomalies 
# --------------------------------------
# Unique years + one extra for right edge
years = np.unique(rdE_danom_d['time.year'].values)
years_ext = np.append(years, years[-1] + 1)
year_ticks = [np.datetime64(f"{y}-01-01") for y in years_ext]

fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(12, 9), sharex=True)

# --- Estuary ---
ax1.plot(rdE_danom_m['time'], rdE_danom_m.values, color='b', linewidth=1.3, linestyle = '--', label = 'Detrended monthly anomaly')
ax1.plot(rdE_danom_d['date'].values, rdE_danom_d.values, linewidth=1, color= 'r', label = 'Detrended daily anomaly')
ax1.axhline(0, color='k', linewidth=0.8, alpha=0.6)
ax1.set_title("Detrended Discharge Anomaly at the Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Anomaly (m³/s)")
ax1.set_xticks(year_ticks)
ax1.set_xticklabels(years_ext)
ax1.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend()

# --- Volta Lake ---
ax2.plot(rdL_danom_m['time'], rdL_danom_m.values, color='purple', linewidth=1.3, linestyle = '--', label = 'Detrended monthly anomaly')
ax2.plot(rdL_danom_d['date'].values, rdL_danom_d.values, linewidth=1, color= 'orange', label = 'Detrended daily anomaly')
ax2.axhline(0, color='k', linewidth=0.8, alpha=0.6)
ax2.set_title("Detrended Discharge Anomaly downstream the Volta Lake (0.087°E, 6.267°N)")
ax2.set_ylabel("Anomaly (m³/s)")
ax2.set_xlabel("Year")
ax2.set_xticks(year_ticks)
ax2.set_xticklabels(years_ext)
ax2.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax2.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax2.legend()

plt.tight_layout()
plt.show()


####################
#### Water Level ###
####################
## Temporal variability of the 'raw' climatic index 
# Timeseries of Water Level 
# Plot
fig, ax1 = plt.subplots(figsize=(12, 5), sharex=True)
ax1.plot(wl_estuary.time, wl_estuary, linestyle='-', lw=0.7, label = 'Daily WL')
# Monthly mean values at the two locations (E = estuary, L = lake)
wl_mon = wl_estuary.resample(time='MS').mean()   # 'MS' = Month Start

ax1.plot(wl_mon.time, wl_mon, linestyle = '-', color = 'r', label = 'Monthly mean')
ax1.set_title("Raw time series - Water Level at Volta Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Water level (m)")  
ax1.set_xlabel("Year")
ax1.grid(True)
ax1.legend()
# vertical lines: one per month
ax1.grid(True, axis='x', which='major', alpha=0.5)
# a few horizontal lines (major only)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)

#plt.tight_layout()
plt.show()

# -----------------------------
# Daily climatology and anomaly
# -----------------------------
  # drop Feb 29 to get a 365-day climatology
is_feb29w = (wl_estuary.time.dt.month == 2) & (wl_estuary.time.dt.day == 29)
wl_noleap = wl_estuary.sel(time=~is_feb29w)
wl_noleap = wl_noleap.convert_calendar("noleap", dim="time", align_on="date")
  # --- Daily climatology (2010–2021) ---
wl_dailyclim = wl_noleap.groupby('time.dayofyear').mean('time')
wl_dailyclim = wl_noleap.groupby('time.dayofyear').mean('time')
dates_climw = pd.date_range("2010-01-01", periods=int(wl_dailyclim.sizes["dayofyear"]), freq="D")
wl_dailyclim = wl_dailyclim.assign_coords(date=("dayofyear", dates_climw))
  # --- Daily anomalies (value - daily climatology) ---
def to_datetime64_from_cftime(tcoord):
    return pd.to_datetime([f"{t.year:04d}-{t.month:02d}-{t.day:02d}" for t in tcoord.values])
wl_dailyanom = wl_noleap.groupby('time.dayofyear') - wl_dailyclim
wl_dailyanom = wl_dailyanom.assign_coords(date=("time", to_datetime64_from_cftime(wl_dailyanom["time"])))

# -------------------------------
# Monthly climatology and anomaly
# -------------------------------
  # Monthly mean values at the two locations (E = estuary, L = lake)
wl_mon = wl_estuary.resample(time='MS').mean()   # 'MS' = Month Start
  # Monthly climatology (average over all years for each month)
wl_clim = wl_mon.groupby('time.month').mean('time')   # dims: month
  # Anomalies = monthly mean - climatology
wl_anom = wl_mon.groupby('time.month') - wl_clim       # dims: time


# --------------------------------------
# Daily and monthly climatology plot WL
# --------------------------------------
months = list(calendar.month_name)[1:]
# reference year (already non-leap)
year = pd.to_datetime(wl_dailyclim['date'].values[0]).year
# dates for the monthly (start the month in the same year as daily)
month_dates = pd.date_range(f"{year}-01-01", periods=12, freq="MS")

fig, ax = plt.subplots(figsize=(12,4))
ax.plot(wl_dailyclim['date'].values, wl_dailyclim.values,  
        ms=2, lw=0.9, label = 'Daily mean 2010-2021')
ax.plot(month_dates, wl_clim.values, marker='o', 
         lw=1, color= 'r', label = 'Monthly mean 2010-2021')
ax.set_title("Daily Water Level Climatology at Volta Estuary (0.667°E, 5.77°N)")
ax.set_ylabel("Water level (m)")
ax.set_xlabel("Month")
ax.grid(True, axis='x', alpha=0.5)
ax.grid(True, axis='y', linestyle='--', alpha=0.4)
ax.legend()

month = pd.date_range('2010-01-01', '2011-01-01', freq='MS')[:-1]
ax.set_xticks(month)
ax.set_xticklabels(months)
ax.legend(loc='upper right', frameon=True)

plt.tight_layout()
plt.show()


# --------------------------------------
# Monthly mean water level
# --------------------------------------
years = sorted(set(rd_estuary['time'].dt.year.values))

fig, ax1 = plt.subplots(figsize=(12, 5), sharex=True)
cmap = plt.get_cmap('tab20')
colors = [cmap(i % cmap.N) for i in range(len(years))]

for i, (y1, yy1) in enumerate(wl_mon.groupby('time.year')):
    # yy is the monthly series for that year (up to 12 points)
    ax1.plot(yy1['time.month'].values, yy1.values, label=str(y1), lw=1.3, color=colors[i])

ax1.plot(wl_clim['month'], wl_clim.values, color='black', label='Climatology', linewidth=2.2)
ax1.set_title("Sea Water Level at the estuary (0.667°E, 5.77°N) - Monthly mean")
ax1.set_ylabel("Water level (m)")
ax1.set_xlabel("Month", labelpad=8)
ax1.set_xticks(range(1, 13))
ax1.set_xticklabels(months)
ax1.set_xlim(1, 12)
ax1.set_axisbelow(True)
ax1.grid(True, axis='x', which='major', alpha=0.5)             
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0, fontsize=8, ncol=1, title="Year")

plt.tight_layout()
plt.show()


# ----------------------------------------------------------
# Monthly and daily water level anomaly without detrending 
# ----------------------------------------------------------
# get unique years from anomalies
years = np.unique(wl_anom['time.year'].values)

# add one extra year so the grid reaches the end of the plot
years_ext = np.append(years, years[-1] + 1)
year_ticks = [np.datetime64(f"{y}-01-01") for y in years_ext]

fig, ax1 = plt.subplots(figsize=(12, 5), sharex=True)

# --- Estuary ---
ax1.plot(wl_dailyanom['date'].values, wl_dailyanom.values, linewidth=0.7, color= 'r', label = 'Daily anomaly')
ax1.plot(wl_anom['time'], wl_anom.values, color='blue', linewidth=1.5, label = 'Monthly anomaly')
ax1.axhline(0, color='k', linewidth=0.8, alpha=0.6)  # baseline
ax1.set_title("Water Level Anomaly at the Estuary (0.667°E, 5.77°N)")
ax1.set_ylabel("Anomaly (m)")
ax1.set_xticks(year_ticks)
ax1.set_xticklabels(years_ext)  # show all year numbers including the last
ax1.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax1.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax1.legend()

plt.show()


# --------------------------------------
# Detrended climatologies and anomalies
# --------------------------------------
baseline = ('2010-01-01','2021-12-31')

# helper per assegnare una coord 'date' da cftime -> datetime64
def to_datetime64_from_cftime(tcoord):
    import pandas as pd
    return pd.to_datetime([f"{t.year:04d}-{t.month:02d}-{t.day:02d}" for t in tcoord.values])

# trend and detrended time series
wl_danom_from_anomd, wl_clim_from_anomd, wl_trend = anomd(wl_estuary, baseline=baseline, deg=1)
wl_detr = wl_estuary - wl_trend.interp(time=wl_estuary['time'])

# detrended monthly climatology
wl_dclim_m = wl_detr.sel(time=slice(*baseline)).groupby('time.month').mean('time')

# detrended daily climatology
is_feb29_w = (wl_detr.time.dt.month == 2) & (wl_detr.time.dt.day == 29)
wl_detr_noleap = wl_detr.sel(time=~is_feb29_E).convert_calendar("noleap", dim="time", align_on="date")
wl_dclim_d = wl_detr_noleap.sel(time=slice(*baseline)).groupby('time.dayofyear').mean('time')

dates_clim_w = pd.date_range("2010-01-01", periods=int(wl_dclim_d.sizes["dayofyear"]), freq="D")
wl_dclim_d = wl_dclim_d.assign_coords(date=("dayofyear", dates_clim_w))

# detrended anomalies
wl_danom_d = wl_detr_noleap.groupby('time.dayofyear') - wl_dclim_d
wl_danom_d = wl_danom_d.assign_coords(date=("time", to_datetime64_from_cftime(wl_danom_d["time"])))

wl_danom_m = wl_detr.resample(time='MS').mean().groupby('time.month') - wl_dclim_m

#--------------------------------------
# Timeseries of Water Level with trend
#--------------------------------------
# Plot
fig, ax = plt.subplots(figsize=(12, 5), sharex=True)
ax.plot(wl_estuary.time, wl_estuary, linestyle='-', lw = 0.7, label = 'Raw')
ax.plot(wl_mon.time, wl_mon, linestyle = '-', color = 'r', label = 'Monthly mean')
ax.plot(wl_trend['time'], wl_trend, linewidth=2, label="Trend", color="tab:orange")
ax.set_title("Raw time series - Sea Water Level at Volta Estuary (0.667°E, 5.77°N)")
ax.set_ylabel("Water level (m)")  
ax.set_xlabel("Year")
ax.grid(True)
# vertical lines: one per month
ax.grid(True, axis='x', which='major', alpha=0.5)
# a few horizontal lines (major only)
ax.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax.legend()

# one vertical grid line per year
year_loc = mdates.YearLocator()              # every year
year_fmt = mdates.DateFormatter('%Y')

ax.xaxis.set_major_locator(year_loc)
ax.xaxis.set_major_formatter(year_fmt)
ax.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)

plt.show()

# -----------------------------------------------
# Daily vs Monthly detrended climatology plot
# -----------------------------------------------
fig, ax = plt.subplots(figsize=(12, 5), sharex=True)

# reference year (already non-leap)
year = pd.to_datetime(wl_dclim_d['date'].values[0]).year
month_dates = pd.date_range(f"{year}-01-01", periods=12, freq="MS")

ax.plot(wl_dclim_d['date'].values, wl_dclim_d.values, lw=1, label="Detrended daily mean 2010–2021")
ax.plot(month_dates, wl_dclim_m.values, marker='o', color= 'r', label="Detrended monthly mean 2010–2021")
ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax.set_title("Detrended Water Level Climatology at the Estuary (0.667°E, 5.77°N)")
ax.set_ylabel("Water level (m)")
ax.set_xlabel("Month")
month = pd.date_range('2010-01-01', '2011-01-01', freq='MS')[:-1]
ax.set_xticks(month)
ax.set_xticklabels(months)
ax.grid(True, axis='x', alpha=0.5)
ax.grid(True, axis='y', linestyle='--', alpha=0.4)
ax.legend(loc='upper right', frameon=True)

plt.tight_layout()
plt.show()

# ----------------------------------------
# Daily vs Monthly detrended anomaly plot 
# ----------------------------------------
# Unique years + one extra for right edge
years = np.unique(rdE_danom_d['time.year'].values)
years_ext = np.append(years, years[-1] + 1)
year_ticks = [np.datetime64(f"{y}-01-01") for y in years_ext]

fig, ax = plt.subplots(figsize=(12, 5), sharex=True)

ax.plot(wl_danom_m['time'].values, wl_danom_m.values, lw=1.3, color = 'b', label="Detrended monthly anomaly")
ax.plot(wl_danom_d['time'].values, wl_danom_d.values, lw = 1, color = 'r', label="Detrended daily anomaly")
ax.plot(wl_danom_m['time'].values, wl_danom_m.values, lw=1.3, color = 'b')
ax.axhline(0, color='k', linewidth=0.8, alpha=0.6)
ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter("%b"))
ax.set_title("Detrended Water Level Climatology at the Estuary (0.667°E, 5.77°N)")
ax.set_ylabel("Anomaly (m)")
ax.set_xlabel("Month")
ax.set_xticks(year_ticks)
ax.set_xticklabels(years_ext)
ax.grid(True, axis='x', which='major', linestyle='--', alpha=0.5)
ax.grid(True, axis='y', which='major', linestyle='--', alpha=0.4)
ax.legend()

plt.tight_layout()
plt.show()


######################
### Power spectrum ###
######################
def fft_spectrum_xr(da: xr.DataArray, pad_factor=4, window='hann'):
    """
    One-sided FFT spectrum for a 1D DataArray with a 'time' coord.
    Returns period (years), amplitude (units), PSD (units^2 / cycles·yr^-1).
    """
    da = da.dropna('time')
    x = da.values.astype(float)
    t = da['time'].values

    # samples per year from median step
    dt_days = np.median(np.diff(t).astype('timedelta64[D]').astype(float))
    fs = 365.2425 / dt_days  # samples/year (≈12 for monthly, ≈365 for daily)

    # de-mean + window
    N = len(x)
    x = x - np.mean(x)
    w = np.hanning(N) if window == 'hann' else np.ones(N)
    U = (w**2).mean()

    # zero-padding for a finer grid
    Nfft = 2**int(np.ceil(np.log2(pad_factor*N)))
    X = np.fft.rfft(x * w, n=Nfft)
    f = np.fft.rfftfreq(Nfft, d=1/fs)          # cycles/year

    # one-sided amplitude and PSD (Parseval-consistent)
    A = 2*np.abs(X)/N
    P = (np.abs(X)**2) / (fs * N * U)
    if N > 1:
        P[1:-1] *= 2.0

    m = f > 0
    period = 1.0 / f[m]
    return period, A[m], P[m]

# ----- compute -----
per_rd, A_rd, PSD_rd = fft_spectrum_xr(rd_estuary)
per_wl, A_wl, PSD_wl = fft_spectrum_xr(wl_estuary)

# ----- plot (amplitude; swap A_* -> PSD_* and change ylabel if you prefer PSD) -----
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 8), sharex=True)

ax1.plot(per_rd, A_rd, '-', label='RD FFT')
ax1.set_ylabel('Amplitude (m³/s)')
ax1.set_title('River Discharge — FFT spectrum'); ax1.grid(True)

ax2.plot(per_wl, A_wl, '-', color='b', label='WL FFT')
ax2.set_xlabel('Period (years)')
ax2.set_ylabel('Amplitude (m)')
ax2.set_title('Water Level — FFT spectrum'); ax2.grid(True)

# helpful guides
for ax in (ax1, ax2):
    ax.set_xlim(0, 15)                     # focus on <= 10 years (adjust if needed)
    for T in (0.5, 1, 2): ax.axvline(T, ls='--', alpha=0.3)

plt.tight_layout(); plt.show()


### PDF ###
# Compute and plot the histograms to see the PDF of the rd and wl raw indeces
rdv = rd.dropna().to_numpy()
wlv = wl.dropna().to_numpy()

# Define the bins for RD and WL raw indeces
bins_rd = np.histogram_bin_edges(rdv, bins='fd')  # Freedman–Diaconis
bins_wl = np.histogram_bin_edges(wlv, bins='fd')

# Compute the histograms
hist_rd, edges_rd = np.histogram(rdv, bins=bins_rd, density=True)
hist_wl, edges_wl = np.histogram(wlv, bins=bins_wl, density=True)

# Calculate the bin centers
cent_rd = (edges_rd[:-1] + edges_rd[1:]) / 2
cent_wl = (edges_wl[:-1] + edges_wl[1:]) / 2

# Plotting the PDFs
fig, ax = plt.subplots(1, 2, figsize=(14, 5))
ax[0].plot(cent_rd, hist_rd, lw=2)
ax[0].set(title='Raw RD index PDF', ylabel='Probability Density', xlabel='River Discharge (m³/s)')
ax[0].grid(True)

ax[1].plot(cent_wl, hist_wl, lw=2)
ax[1].set(title='Raw WL index PDF', ylabel='Probability Density', xlabel='Water level (m)')
ax[1].grid(True)

plt.tight_layout()
plt.show()


# Compute and plot the histograms to see the PDF of the rd and wl detrended anomalies
# DataArray -> NumPy 1D without NaN
rddv = rdE_danom_m.to_series().dropna().to_numpy()
wldv = wl_danom.to_series().dropna().to_numpy()

# Define the bins for RD and WL detrended anomalies, limiting the outliers.
rddv_bins_base = np.clip(rddv, np.percentile(rddv, 1), np.percentile(rddv, 99))
bins_rdd = np.histogram_bin_edges(rddv_bins_base, bins=30)   # 30 bin regolari
bins_wld = np.histogram_bin_edges(wldv, bins='fd')           # FD va bene per WL

# Compute the histograms
hist_rdd, edges_rdd = np.histogram(rddv, bins=bins_rdd, density=True)
hist_wld, edges_wld = np.histogram(wldv, bins=bins_wld, density=True)

# Calculate the bin centers
cent_rdd = (edges_rdd[:-1] + edges_rdd[1:]) / 2
cent_wld = (edges_wld[:-1] + edges_wld[1:]) / 2

# Plotting the PDFs
fig, ax = plt.subplots(1, 2, figsize=(14, 5))

ax[0].plot(cent_rdd, hist_rdd, lw=2, color='r')
ax[0].set(title='Detrended RD anomaly PDF',
          ylabel='Probability Density',
          xlabel='River Discharge anomaly (m³/s)')
ax[0].grid(True)

ax[1].plot(cent_wld, hist_wld, lw=2, color='r')
ax[1].set(title='Detrended WL anomaly PDF',
          ylabel='Probability Density',
          xlabel='Water Level anomaly (m)')
ax[1].grid(True)

plt.tight_layout()
plt.show()


# To compare shapes fairly, it's opportune to normalize both datasets to z-scores and then plot on the same axis

# DataArray -> NumPy 1D without NaN
rddv = rdE_danom_m.to_series().dropna().to_numpy()
wldv = wl_danom.to_series().dropna().to_numpy()

# Normalization
zr = (rddv - rddv.mean()) / rddv.std(ddof=1)
zw = (wldv - wldv.mean()) / wldv.std(ddof=1)

# Computation of bin width, histograms, and bin centers
bins = np.linspace(-4, 4, 41)
hr, e = np.histogram(zr, bins=bins, density=True)
hw, _ = np.histogram(zw, bins=bins, density=True)
c = (e[:-1] + e[1:]) / 2

# Plot of compared normalized PDFs
plt.figure(figsize=(8,5))
plt.plot(c, hr, lw=2, label='RD z-score')
plt.plot(c, hw, lw=2, label='WL z-score')
plt.xlabel('z'); plt.ylabel('Probability Density'); plt.grid(True); plt.legend()
plt.title('Detrended normalized anomalies PDF')
plt.tight_layout(); plt.show()


## Joint PDF ##
def joint_pdf_2d(x, y, n_bins=60, center='median', mode='pdf'):
    """
    Empirical joint distribution on a rectilinear grid centered at mean/median.

    x, y      : 1D arrays (NaNs allowed; they are dropped)
    n_bins    : number of bins per axis (bin width = (max-min)/n_bins)
    center    : 'median' or 'mean' for where the grid is centered
    mode      : 'pdf' (default), 'prob' (probability per bin), or 'count'

    Returns
    -------
    M   : 2D array (shape [nx, ny]) with pdf/probability/counts
    XC  : 2D array of x bin centers (same shape as M)
    YC  : 2D array of y bin centers (same shape as M)
    dx, dy : bin widths (scalars)
    """
    x = np.asarray(x).ravel()
    y = np.asarray(y).ravel()
    m = np.isfinite(x) & np.isfinite(y)
    x, y = x[m], y[m]

    # ranges and widths
    xmin, xmax = x.min(), x.max()
    ymin, ymax = y.min(), y.max()
    dx = (xmax - xmin) / n_bins
    dy = (ymax - ymin) / n_bins

    # grid centers (symmetrically around mean/median, like your code)
    cx = np.median(x) if center == 'median' else x.mean()
    cy = np.median(y) if center == 'median' else y.mean()

    x_plus  = np.arange(cx, xmax + dx,  dx)
    x_minus = np.arange(cx, xmin - dx, -dx)[-1:0:-1]
    xc = np.concatenate([x_minus, x_plus])

    y_plus  = np.arange(cy, ymax + dy,  dy)
    y_minus = np.arange(cy, ymin - dy, -dy)[-1:0:-1]
    yc = np.concatenate([y_minus, y_plus])

    # convert centers -> edges for histogram2d
    xedges = np.r_[xc - dx/2, xc[-1] + dx/2]
    yedges = np.r_[yc - dy/2, yc[-1] + dy/2]

    # raw counts per bin
    H, _, _ = np.histogram2d(x, y, bins=[xedges, yedges], density=False)

    if mode == 'count':
        M = H
    elif mode == 'prob':
        M = H / H.sum()                       # Σ M = 1
    else:  # 'pdf'
        M = H / (H.sum() * dx * dy)           # ∫∫ M dx dy = 1

    # centers mesh (same shape as M)
    XC, YC = np.meshgrid(xc, yc, indexing='ij')
    return M, XC, YC, dx, dy

# align and drop NaNs
danom_aligned = xr.Dataset({'rd': rdE_danom_m, 'wl': wl_danom}).to_dataframe().dropna()
x = danom_aligned['rd'].to_numpy()
y = danom_aligned['wl'].to_numpy()

# joint PDF
P, XX, YY, dx, dy = joint_pdf_2d(x, y, n_bins=40, center='median', mode='pdf')

# plot (PDF)
plt.figure(figsize=(7,6))
cs = plt.contourf(XX, YY, P, levels=20, cmap='jet')
plt.colorbar(cs, label='Probability density')
plt.xlabel('RD anomaly (m³/s)')
plt.ylabel('WL anomaly (m)')
plt.title('Joint PDF RD–WL')
plt.tight_layout()
plt.show()
